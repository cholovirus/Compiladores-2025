	COMMENT	if	(	)	{	}	else	IDENTIFIER	=	;	for	input	print	save	,	STRING	concat	==	!=	<	<=	>	>=	+	-	*	/	%	NUMBER	img	vid	int	float	string	image	video	$
Program	Program -> StatementList	Program -> StatementList						Program -> StatementList			Program -> StatementList	Program -> StatementList	Program -> StatementList	Program -> StatementList			Program -> StatementList															Program -> StatementList	Program -> StatementList	Program -> StatementList	Program -> StatementList	Program -> StatementList	Program -> StatementList
StatementList	StatementList -> Statement StatementList	StatementList -> Statement StatementList				StatementList -> ''		StatementList -> Statement StatementList			StatementList -> Statement StatementList	StatementList -> Statement StatementList	StatementList -> Statement StatementList	StatementList -> Statement StatementList			StatementList -> Statement StatementList															StatementList -> Statement StatementList	StatementList -> Statement StatementList	StatementList -> Statement StatementList	StatementList -> Statement StatementList	StatementList -> Statement StatementList	StatementList -> ''
Statement	Statement -> COMMENT	Statement -> IfStmt						Statement -> NonIfStmt			Statement -> NonIfStmt	Statement -> NonIfStmt	Statement -> NonIfStmt	Statement -> NonIfStmt			Statement -> NonIfStmt															Statement -> NonIfStmt	Statement -> NonIfStmt	Statement -> NonIfStmt	Statement -> NonIfStmt	Statement -> NonIfStmt	
IfStmt		IfStmt -> if ( Expression ) { StatementList } IfStmtPrime																																			
IfStmtPrime	IfStmtPrime -> ''	IfStmtPrime -> ''				IfStmtPrime -> ''	IfStmtPrime -> else { StatementList }	IfStmtPrime -> ''			IfStmtPrime -> ''	IfStmtPrime -> ''	IfStmtPrime -> ''	IfStmtPrime -> ''			IfStmtPrime -> ''															IfStmtPrime -> ''	IfStmtPrime -> ''	IfStmtPrime -> ''	IfStmtPrime -> ''	IfStmtPrime -> ''	IfStmtPrime -> ''
NonIfStmt								NonIfStmt -> IDENTIFIER NonIfStmtPrime			NonIfStmt -> ForStmt	NonIfStmt -> IOStmt	NonIfStmt -> IOStmt	NonIfStmt -> IOStmt			NonIfStmt -> IOStmt															NonIfStmt -> VarDecl	NonIfStmt -> VarDecl	NonIfStmt -> VarDecl	NonIfStmt -> VarDecl	NonIfStmt -> VarDecl	
NonIfStmtPrime	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;				NonIfStmtPrime -> RelationalTail ;		NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> = Expression ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;			NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;									NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;	NonIfStmtPrime -> RelationalTail ;
VarDecl																																VarDecl -> Type IDENTIFIER = Expression ;	VarDecl -> Type IDENTIFIER = Expression ;	VarDecl -> Type IDENTIFIER = Expression ;	VarDecl -> Type IDENTIFIER = Expression ;	VarDecl -> Type IDENTIFIER = Expression ;	
ForStmt											ForStmt -> for ( Assignment Expression ; Assignment ) { StatementList }																										
Assignment								Assignment -> IDENTIFIER = Expression ;																													
IOStmt												IOStmt -> input ( IDENTIFIER ) ;	IOStmt -> print ( Expression ) ;	IOStmt -> save ( IDENTIFIER , STRING ) ;			IOStmt -> concat ( IDENTIFIER , IDENTIFIER ) ;																				
Expression			Expression -> AddExpr RelationalTail					Expression -> AddExpr RelationalTail								Expression -> AddExpr RelationalTail													Expression -> AddExpr RelationalTail	Expression -> AddExpr RelationalTail	Expression -> AddExpr RelationalTail						
RelationalTail				RelationalTail -> ''						RelationalTail -> ''								RelationalTail -> == AddExpr RelationalTail	RelationalTail -> != AddExpr RelationalTail	RelationalTail -> < AddExpr RelationalTail	RelationalTail -> <= AddExpr RelationalTail	RelationalTail -> > AddExpr RelationalTail	RelationalTail -> >= AddExpr RelationalTail														
AddExpr			AddExpr -> Term AddTail					AddExpr -> Term AddTail								AddExpr -> Term AddTail													AddExpr -> Term AddTail	AddExpr -> Term AddTail	AddExpr -> Term AddTail						
AddTail				AddTail -> ''						AddTail -> ''								AddTail -> ''	AddTail -> ''	AddTail -> ''	AddTail -> ''	AddTail -> ''	AddTail -> ''	AddTail -> + Term AddTail	AddTail -> - Term AddTail												
Term			Term -> Factor TermTail					Term -> Factor TermTail								Term -> Factor TermTail													Term -> Factor TermTail	Term -> Factor TermTail	Term -> Factor TermTail						
TermTail				TermTail -> ''						TermTail -> ''								TermTail -> ''	TermTail -> ''	TermTail -> ''	TermTail -> ''	TermTail -> ''	TermTail -> ''	TermTail -> ''	TermTail -> ''	TermTail -> * Factor TermTail	TermTail -> / Factor TermTail	TermTail -> % Factor TermTail									
Factor			Factor -> ( Expression )					Factor -> IDENTIFIER								Factor -> STRING													Factor -> NUMBER	Factor -> img ( STRING )	Factor -> vid ( STRING )						
Type																																Type -> int	Type -> float	Type -> string	Type -> image	Type -> video	
Params																																Params -> Param ParamsTail	Params -> Param ParamsTail	Params -> Param ParamsTail	Params -> Param ParamsTail	Params -> Param ParamsTail	
Param																																Param -> Type IDENTIFIER	Param -> Type IDENTIFIER	Param -> Type IDENTIFIER	Param -> Type IDENTIFIER	Param -> Type IDENTIFIER	
ParamsTail															ParamsTail -> , Param ParamsTail																						